# This workflow implements continuous delivery with automated testing and fully
name: CD
on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Setup
      uses: actions/setup-go@v2
      with:
        go-version: '1.16'

    - name: Checkout
      uses: actions/checkout@v2

    - name: Build
      run: make build

    - name: Build docker image
      run: make image

    - name: Test
      run: git show --stat && make testci
  
  push_to_registry:
    name: Push Docker image to Docker Hub
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD      
      - name: Docker Push
        run: make imagepush

  create_release:
    name: Publish new release
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [push_to_registry]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: setenv
      run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
    - name: Create Release
      uses: thomaseizinger/create-release@1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
        tag_name: ${{ env.VERSION }}
        name: ${{ env.VERSION }}
        draft: false
        prerelease: false 
  
  update_helm_chart:
    name: update helm chart
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [create_release]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: setenv
      run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
    - name: update helm chart
      env:
        EMAIL: ${{secrets.GIT_EMAIL}}
        USER: ${{secrets.GIT_USER}}
      run: |
       git fetch
       git checkout argocd
       VALUE=`cat image.txt`
       sed -i "s/$VALUE/$VERSION/g" deployment/charts/values.yaml
       echo $VERSION  > image.txt
       git config --global user.email "$EMAIL"
       git config --global user.name "$USER"
       git add .
       git commit -m "update helm chart"
       git push origin argocd
