# This workflow implements continuous delivery with automated testing and fully
# autonomous deploys to production on merge.
name: CD

# Translated: "Execute this workflow on pushes to master OR on pull requests
# opened against master"
#
# See this question and answer for what we're solving here:
# https://github.community/t5/GitHub-Actions/How-to-trigger-an-action-on-push-or-pull-request-but-not-both/m-p/36155#M2460
on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Setup
      uses: actions/setup-go@v2
      with:
        go-version: '1.16'

    - name: Checkout
      uses: actions/checkout@v2

    - name: Build
      run: make build

    - name: Build docker image
      run: make image

    - name: Test
      run: git show --stat && make testci
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: weezyval/testing
      
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  # push_to_registry:
  #   name: Push Docker image to Docker Hub
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v2
  #     - name: setenv
  #       run: echo "VERSION=v3.0.0" >> $GITHUB_ENV
      
  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
      
  #     - name: Extract metadata (tags, labels) for Docker
  #       id: meta
  #       uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
  #       with:
  #         images: weezyval/testing
      
  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ env.VERSION }}
  #         labels: ${{ steps.meta.outputs.labels }}
  release:
    name: Publish new release
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: setenv
      run: echo "VERSION=v-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      # - name: Extract version from branch name (for release branches)
      #   run: |
      #     VERSION=$(GITHUB_SHA) 

      #     echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
    - name: Create Release
      uses: thomaseizinger/create-release@1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
        tag_name: ${{ env.VERSION }}
        name: ${{ env.VERSION }}
        draft: false
        prerelease: false 

    # - name: Code coverage
    #   uses: codecov/codecov-action@v1
    #   with:
    #     file: ./coverage.txt
  
  # regression_test:
  #   name: Regression Tests
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       go_version:
  #       - '1.13'
  #       - '1.14'
  #       - '1.15'

  #   steps:
  #   - name: Setup
  #     uses: actions/setup-go@v2
  #     with:
  #       go-version: ${{matrix.go_version}}

  #   - name: Checkout
  #     uses: actions/checkout@v2

  #   - name: Build
  #     run: make build

  #   - name: Test
  #     run: make test

  # production_deploy:
  #   name: Production Deploy
  #   if: github.ref == 'refs/heads/master'
  #   runs-on: ubuntu-latest
  #   needs: [test]
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2

  #   - name: Notify start
  #     id: deployment
  #     uses: bobheadxi/deployments@v0.4.2
  #     with:
  #       step: start
  #       token: ${{ secrets.GITHUB_TOKEN }}
  #       env: production

    # - name: Deploy
    #   uses: superfly/flyctl-actions@1.1
    #   with:
    #     args: "deploy --strategy rolling"
    #   env:
    #     DOCKER_BUILDKIT: 1
    #     FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    # - name: Notify finish
    #   uses: bobheadxi/deployments@v0.4.2
    #   with:
    #     step: finish
    #     deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     env: production
    #     status: ${{ job.status }}
    #     env_url: 'https://httpbingo.org'
